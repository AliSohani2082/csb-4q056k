{"version":3,"sources":["Canvas.js","index.js"],"names":["Switch","x","set","useGLTF","nodes","materials","texture","useTexture","useState","hovered","setHover","useEffect","document","body","style","cursor","onClick","useCallback","toggle","Number","onPointerOver","onPointerOut","pZ","to","rX","Math","PI","color","scale","dispose","mesh","receiveShadow","castShadow","material","track","geometry","Cube","group","raycast","meshBounds","args","meshStandardMaterial","roughness","map","pointLight","intensity","distance","Shadow","renderOrder","position","rotation","Scene","orthographic","shadows","dpr","camera","zoom","fov","directionalLight","spotLight","angle","fallback","shadowMaterial","transparent","opacity","App","useSpring","config","mass","tension","friction","precision","div","class","backgroundColor","children","h1","toFixed","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a812a913.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, Suspense } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { useGLTF, useTexture, Shadow, meshBounds } from \"@react-three/drei\"\n// We take the \"a\" element from /three here because we want to animate threejs objects\nimport { a } from \"@react-spring/three\"\n\nfunction Switch({ x, set }) {\n  const { nodes, materials } = useGLTF(\"/switch.glb\")\n  const texture = useTexture(\"/cross.jpg\")\n  // Hover state\n  const [hovered, setHover] = useState(false)\n  useEffect(() => void (document.body.style.cursor = hovered ? \"pointer\" : \"auto\"), [hovered])\n  // Events\n  const onClick = useCallback(() => set((toggle) => Number(!toggle)), [set])\n  const onPointerOver = useCallback(() => setHover(true), [])\n  const onPointerOut = useCallback(() => setHover(false), [])\n  // Interpolations\n  const pZ = x.to([0, 1], [-1.2, 1.2])\n  const rX = x.to([0, 1], [0, Math.PI * 1.3])\n  const color = x.to([0, 1], [\"#888\", \"#2a2a2a\"])\n  return (\n    <group scale={[1.25, 1.25, 1.25]} dispose={null}>\n      <a.mesh receiveShadow castShadow material={materials.track} geometry={nodes.Cube.geometry} material-color={color} material-roughness={0.5} material-metalness={0.8} />\n      <a.group position-y={0.85} position-z={pZ}>\n        <a.mesh receiveShadow castShadow raycast={meshBounds} rotation-x={rX} onClick={onClick} onPointerOver={onPointerOver} onPointerOut={onPointerOut}>\n          <sphereGeometry args={[0.8, 64, 64]} />\n          <a.meshStandardMaterial roughness={0.5} map={texture} />\n        </a.mesh>\n        <a.pointLight intensity={100} distance={1.4} color={color} />\n        <Shadow renderOrder={-1000} position={[0, -1, 0]} rotation={[-Math.PI / 2, 0, 0]} scale={1.5} />\n      </a.group>\n    </group>\n  )\n}\n\nexport function Scene({ x, set }) {\n  // Create a color interpolation\n  const color = x.to([0, 1], [\"#7fffd4\", \"#c72f46\"])\n  return (\n    <Canvas orthographic shadows dpr={[1, 2]} camera={{ zoom: 60, position: [-10, 10, 10], fov: 35 }}>\n      <ambientLight intensity={0.1} />\n      <directionalLight position={[-20, 20, 20]} intensity={1} />\n      <a.directionalLight position={[-20, -20, -20]} intensity={0.5} color={color} />\n      <a.pointLight position={[0, 0, 5]} distance={5} intensity={5} color={color} />\n      <a.spotLight color={color} position={[10, 20, 20]} angle={0.1} intensity={2} shadow-mapSize-width={2048} shadow-mapSize-height={2048} shadow-bias={-0.00001} castShadow />\n      <Suspense fallback={null}>\n        <Switch x={x} set={set} />\n      </Suspense>\n      <mesh receiveShadow renderOrder={1000} position={[0, 0, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n        <planeGeometry args={[10, 10]} />\n        <a.shadowMaterial transparent opacity={x.to((x) => 0.1 + x * 0.2)} />\n      </mesh>\n    </Canvas>\n  )\n}\n","import React, { useState } from \"react\"\nimport ReactDOM from \"react-dom\"\n// All hooks are cross platform now\nimport { useSpring } from \"@react-spring/core\"\n// Platform knowledge is in here ...\nimport { a } from \"@react-spring/web\"\nimport \"./styles.css\"\nimport { Scene } from \"./Canvas\"\n\nfunction App() {\n  const [toggle, set] = useState(0)\n  // Set up a shared spring which simply animates the toggle above\n  // We use this spring to interpolate all the colors, position and rotations\n  const [{ x }] = useSpring({ x: toggle, config: { mass: 5, tension: 1000, friction: 50, precision: 0.0001 } }, [toggle])\n  return (\n    <a.div class=\"container\" style={{ backgroundColor: x.to([0, 1], [\"#c9ffed\", \"#ff2558\"]), color: x.to([0, 1], [\"#7fffd4\", \"#c70f46\"]) }}>\n      <h1 class=\"open\" children=\"<h1>\" />\n      <h1 class=\"close\" children=\"</h1>\" />\n      <a.h1>{x.to((x) => (x + 8).toFixed(2))}</a.h1>\n      <Scene x={x} set={set} />\n    </a.div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}